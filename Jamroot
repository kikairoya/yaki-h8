import testing ;
import os ;
import common ;
import toolset ;
import feature ;
import builtin ;
import property-set ;
import option ;
import make ;

BOOST_ROOT = [ os.environ BOOST_ROOT ] ;

project : build-dir bin
	: requirements
		<define>BOOST_ALL_NO_LIB=1
		<link>shared:<define>BOOST_SYSTEM_DYN_LINK=1
		<link>shared:<define>BOOST_TEST_DYN_LINK=1
		<toolset-gcc:flavor>mingw:<target-os>windows
		<toolset-gcc:flavor>cygwin:<target-os>cygwin
		<conditional>@suppress-warnings
		<c++-template-depth>256
		<cxxflags>-std=gnu++0x
	: usage-requirements
		<define>BOOST_ALL_NO_LIB=1
		<link>shared:<define>BOOST_SYSTEM_DYN_LINK=1
		<link>shared:<define>BOOST_TEST_DYN_LINK=1
	;

rule suppress-warnings ( properties * ) {
    local vc-ver = [
        MATCH "^<toolset-msvc:version>([0-9]+)[.]" : $(properties)
    ] ;
    if $(vc-ver) && $(vc-ver) >= 8
    {
        return <cxxflags>-wd4819 <cxxflags>-wd4996 ;
    }
}


alias win32_sys_libs : : <library>ws2_32 <library>mswsock <library>gdi32 <library>user32 <library>advapi32 : : <library>ws2_32 <library>mswsock <library>gdi32 <library>user32 <library>advapi32 ;
alias posix_sys_libs : : <library>rt <library>pthread <library>zlib <library>dl : : <library>rt <library>pthread <library>zlib <library>dl ;
lib ssl : : : : <library>crypto ;
lib ssl : : <toolset>msvc <name>ssleay32 <link>shared:<search>$(OPENSSL_ROOT)/out32dll <link>static:<search>$(OPENSSL_ROOT)/out32 : : <library>crypto ;
lib crypto : : <use>posix_sys_libs : : <library>posix_sys_libs ;
lib crypto : : <toolset>msvc <name>libeay32 <use>win32_sys_libs
	<link>shared:<search>$(OPENSSL_ROOT)/out32dll <link>static:<search>$(OPENSSL_ROOT)/out32 
	: : <library>win32_sys_libs ;
lib crypto : : <use>win32_sys_libs <toolset>gcc <target-os>cygwin : : <library>win32_sys_libs <library>zlib ;
lib crypto : : <use>win32_sys_libs <toolset>gcc <target-os>windows : : <library>win32_sys_libs ;
lib ws2_32 ;
lib mswsock ;
lib gdi32 ;
lib user32 ;
lib advapi32 ;
lib rt ;
lib pthread ;
lib zlib : : <name>z ;
lib dl ;

exe yaki-h8 :
	yaki-h8.cc
	:
	<library>boost_headers
	<library>boost_program_options
	<library>boost_system <implicit-dependency>stub-h8tiny.h <library>sys_libs
	:
	:
	<library>boost_headers
	<library>boost_program_options
	<library>boost_system
	;


make stub-h8tiny.h : stub-h8tiny.bin : @bintoc-h8tiny ;
actions bintoc-h8tiny {
	perl -e 'open(IN, $ARGV[0]); binmode(IN); sysread(IN, $buf, 768); close(IN); @data = unpack("C*", $buf); $n = 0; open(OUT, "> ".$ARGV[1]); print OUT "static const unsigned char ", $ARGV[2], "[] = {"; for $x (@data) { printf OUT "%s0x%02X,", $n++%16==0 ? "\n\t" : " ", $x;  }; print OUT "\n};\n"; close(OUT);' $(>) $(<) stub_h8tiny
}

make stub-h8tiny.bin : stub-h8tiny.elf : @objcopy-h8 ;
actions objcopy-h8 {
	h8300-elf-objcopy -O binary $(>) $(<)
}

make stub-h8tiny.elf : stub-h8generic.S : @gas-h8300hn ;
actions gas-h8300hn {
	h8300-elf-gcc $(>) -o $(<) -Wall -Wa,--defsym,_ram=0xFB80 -mh -mn -mrelax -nostartfiles -nodefaultlibs -nostdlib
}


local prefix = [ option.get prefix ] ;
prefix ?= . ;

alias sys_libs : : <library>posix_sys_libs ;
alias sys_libs : : <use>win32_sys_libs <toolset>gcc <target-os>cygwin : : <library>win32_sys_libs ;
alias sys_libs : : <use>win32_sys_libs <toolset>gcc <target-os>windows : : <library>win32_sys_libs ;
explicit sys_libs ;


install install-bin : yaki-h8 :
	<location>$(prefix)/bin
	<dll-path>$(prefix)/lib
	<install-dependencies>on
	<install-type>EXE
	;

install install-bin : yaki-h8 :
	<target-os>cygwin
	<location>$(prefix)/bin
	<install-dependencies>on
	<install-type>EXE
	<install-type>SHARED_LIB
	;

install install-bin : yaki-h8 :
	<target-os>windows
	<location>$(prefix)/bin
	<install-dependencies>on
	<install-type>EXE
	<install-type>SHARED_LIB
	;

install install-lib : yaki-h8 :
	<location>$(prefix)/lib
	<install-dependencies>on
	<install-type>LIB
    ;

install install-lib : :
	<target-os>cygwin
	;
install install-lib : :
	<target-os>windows
	;

alias install : install-bin install-lib ;
explicit install-bin install-lib install-inc install ;

if $(BOOST_ROOT) = "" {
	lib boost_program_options ;
	lib boost_system ;
	lib boost_unit_test_framework ;
	lib boost_thread ;
	alias boost_headers ;
} else {
	use-project /boost : $(BOOST_ROOT) ;
	alias boost_program_options : /boost/program_options//boost_program_options ;
	alias boost_system : /boost/system//boost_system ;
	alias boost_unit_test_framework : /boost/test//boost_unit_test_framework ;
	alias boost_thread : /boost/thread//boost_thread ;
	alias boost_headers : /boost//headers ;
}


